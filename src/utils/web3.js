import { ethers } from 'ethers';

const provider = new ethers.providers.Web3Provider(window.ethereum);

const signer = provider.getSigner();

const contractAddress = '0xc5Db83C04BFb3c7e842f45950C75E156fa6383a7';

// prettier-ignore
const contractABI = [ { anonymous: false, inputs: [ { indexed: true, internalType: 'address', name: 'owner', type: 'address', }, { indexed: true, internalType: 'address', name: 'operator', type: 'address', }, { indexed: false, internalType: 'bool', name: 'approved', type: 'bool', }, ], name: 'ApprovalForAll', type: 'event', }, { anonymous: false, inputs: [ { indexed: true, internalType: 'address', name: 'previousOwner', type: 'address', }, { indexed: true, internalType: 'address', name: 'newOwner', type: 'address', }, ], name: 'OwnershipTransferred', type: 'event', }, { anonymous: false, inputs: [ { indexed: true, internalType: 'address', name: 'operator', type: 'address', }, { indexed: true, internalType: 'address', name: 'from', type: 'address', }, { indexed: true, internalType: 'address', name: 'to', type: 'address', }, { indexed: false, internalType: 'uint256[]', name: 'ids', type: 'uint256[]', }, { indexed: false, internalType: 'uint256[]', name: 'amounts', type: 'uint256[]', }, ], name: 'TransferBatch', type: 'event', }, { anonymous: false, inputs: [ { indexed: true, internalType: 'address', name: 'operator', type: 'address', }, { indexed: true, internalType: 'address', name: 'from', type: 'address', }, { indexed: true, internalType: 'address', name: 'to', type: 'address', }, { indexed: false, internalType: 'uint256', name: 'id', type: 'uint256', }, { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256', }, ], name: 'TransferSingle', type: 'event', }, { anonymous: false, inputs: [ { indexed: false, internalType: 'string', name: 'value', type: 'string', }, { indexed: true, internalType: 'uint256', name: 'id', type: 'uint256', }, ], name: 'URI', type: 'event', }, { inputs: [ { internalType: 'uint256', name: 'position', type: 'uint256', }, { internalType: 'uint256', name: 'ymax', type: 'uint256', }, { internalType: 'uint256', name: 'nbpix', type: 'uint256', }, { internalType: 'string', name: 'image', type: 'string', }, ], name: 'mint_One_4d', outputs: [], stateMutability: 'payable', type: 'function', }, { inputs: [], name: 'renounceOwnership', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [ { internalType: 'address', name: 'from', type: 'address', }, { internalType: 'address', name: 'to', type: 'address', }, { internalType: 'uint256[]', name: 'ids', type: 'uint256[]', }, { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]', }, { internalType: 'bytes', name: 'data', type: 'bytes', }, ], name: 'safeBatchTransferFrom', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [ { internalType: 'address', name: 'from', type: 'address', }, { internalType: 'address', name: 'to', type: 'address', }, { internalType: 'uint256', name: 'id', type: 'uint256', }, { internalType: 'uint256', name: 'amount', type: 'uint256', }, { internalType: 'bytes', name: 'data', type: 'bytes', }, ], name: 'safeTransferFrom', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [ { internalType: 'bool', name: 'allow', type: 'bool', }, ], name: 'setAllowGaslessListing', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [ { internalType: 'address', name: 'operator', type: 'address', }, { internalType: 'bool', name: 'approved', type: 'bool', }, ], name: 'setApprovalForAll', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [ { internalType: 'uint256', name: 'newValue', type: 'uint256', }, ], name: 'setRoyaltyPPM', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [ { internalType: 'string', name: 'newUri', type: 'string', }, ], name: 'setUri', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [], name: 'thankYouForSupportingUs_o4k', outputs: [], stateMutability: 'payable', type: 'function', }, { inputs: [ { internalType: 'contract IERC20', name: 'erc20Token', type: 'address', }, ], name: 'thankYouForSupportingUsERC20_V1M', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [ { internalType: 'address', name: 'newOwner', type: 'address', }, ], name: 'transferOwnership', outputs: [], stateMutability: 'nonpayable', type: 'function', }, { inputs: [], name: '_pricePerPix', outputs: [ { internalType: 'uint256', name: '', type: 'uint256', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'address', name: 'owner', type: 'address', }, { internalType: 'uint256', name: 'id', type: 'uint256', }, ], name: 'balanceOf', outputs: [ { internalType: 'uint256', name: 'balance', type: 'uint256', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'address[]', name: 'owners', type: 'address[]', }, { internalType: 'uint256[]', name: 'ids', type: 'uint256[]', }, ], name: 'balanceOfBatch', outputs: [ { internalType: 'uint256[]', name: 'balances', type: 'uint256[]', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'uint256', name: '', type: 'uint256', }, ], name: 'chunks', outputs: [ { internalType: 'uint256', name: 'position', type: 'uint256', }, { internalType: 'uint256', name: 'ymax', type: 'uint256', }, { internalType: 'uint256', name: 'nbpix', type: 'uint256', }, { internalType: 'string', name: 'image', type: 'string', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'address', name: 'owner', type: 'address', }, { internalType: 'address', name: 'operator', type: 'address', }, ], name: 'isApprovedForAll', outputs: [ { internalType: 'bool', name: '', type: 'bool', }, ], stateMutability: 'view', type: 'function', }, { inputs: [], name: 'name', outputs: [ { internalType: 'string', name: '', type: 'string', }, ], stateMutability: 'view', type: 'function', }, { inputs: [], name: 'owner', outputs: [ { internalType: 'address', name: '', type: 'address', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'uint256', name: 'id', type: 'uint256', }, ], name: 'ownerOf', outputs: [ { internalType: 'address', name: '', type: 'address', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'uint256', name: '', type: 'uint256', }, { internalType: 'uint256', name: 'salePrice', type: 'uint256', }, ], name: 'royaltyInfo', outputs: [ { internalType: 'address', name: 'receiver', type: 'address', }, { internalType: 'uint256', name: 'royaltyAmount', type: 'uint256', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4', }, ], name: 'supportsInterface', outputs: [ { internalType: 'bool', name: '', type: 'bool', }, ], stateMutability: 'pure', type: 'function', }, { inputs: [], name: 'symbol', outputs: [ { internalType: 'string', name: '', type: 'string', }, ], stateMutability: 'view', type: 'function', }, { inputs: [], name: 'totalSupply', outputs: [ { internalType: 'uint256', name: '', type: 'uint256', }, ], stateMutability: 'view', type: 'function', }, { inputs: [ { internalType: 'uint256', name: '_tokenId', type: 'uint256', }, ], name: 'uri', outputs: [ { internalType: 'string', name: '', type: 'string', }, ], stateMutability: 'view', type: 'function', }, ];

const contract = new ethers.Contract(contractAddress, contractABI, signer);

const getSupply = async (id) => {
    await provider.send('eth_requestAccounts', []);
    // console.log('signer :', signer)
    return await contract.totalSupply();
};

const chunkCreator = async (res) => {
    await provider.send('eth_requestAccounts', []);
    // console.log('signer :', signer)
    // console.log(await contract.chunks(1))
    const oneGwei = ethers.BigNumber.from('1000000000');
    // console.log(ethers.utils.formatUnits(oneGwei, 0))
    let overrides = {
        value: oneGwei.mul(res.nbPix).mul(100000),
    };
    let tx = contract.mint_One_4d(res.position, res.ymax, res.nbPix, res.imgURI, overrides);
};

const getChunk = async (id) => {
    await provider.send('eth_requestAccounts', []);
    // console.log('signer :', signer)
    return await contract.chunks(id);
};

export { chunkCreator, getChunk, getSupply };
